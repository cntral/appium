/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * path to the directory where Appium will keep installed drivers, plugins, and any other metadata necessary for its operation. Defaults to APPIUM_HOME env var; failing that, a system-specific location in the current user's home directory.
 */
export type AppiumHomeSchema = string;
/**
 * One or more log filtering rules
 */
export type LogFiltersSchema = string[];
/**
 * A list of drivers to activate. By default, all installed drivers will be activated.  If a string, must be valid JSON
 */
export type DriversSchema = string | string[];
/**
 * A list of plugins to activate. To activate all plugins, use the single string "all". If a string, can otherwise be valid JSON.
 */
export type PluginsSchema = string | string[];
/**
 * Whether the Appium server should allow web browser connections from any host
 */
export type AllowCorsSchema = boolean;
/**
 * IP address to listen on
 */
export type AddressSchema = string;
/**
 * Port to listen on
 */
export type PortSchema = number;
/**
 * Base path to use as the prefix for all webdriver routes running on the server
 */
export type BasePathSchema = string;
/**
 * Number of seconds the Appium server should apply as both the keep-alive timeout and the connection timeout for all requests. A value of 0 disables the timeout.
 */
export type KeepAliveTimeoutSchema = number;
/**
 * Callback IP address (default: same as "address")
 */
export type CallbackAddressSchema = string;
/**
 * Callback port (default: same as "port")
 */
export type CallbackPortSchema = number;
/**
 * Enables session override (clobbering)
 */
export type SessionOverrideSchema = boolean;
/**
 * Also send log output to this file
 */
export type LogSchema = string;
/**
 * Log level (console[:file])
 */
export type LogLevelSchema =
  | "info"
  | "info:debug"
  | "info:info"
  | "info:warn"
  | "info:error"
  | "warn"
  | "warn:debug"
  | "warn:info"
  | "warn:warn"
  | "warn:error"
  | "error"
  | "error:debug"
  | "error:info"
  | "error:warn"
  | "error:error"
  | "debug"
  | "debug:debug"
  | "debug:info"
  | "debug:warn"
  | "debug:error";
/**
 * Show timestamps in console output
 */
export type LogTimestampSchema = boolean;
/**
 * Use local timezone for timestamps
 */
export type LocalTimezoneSchema = boolean;
/**
 * Do not use color in console output
 */
export type LogNoColorsSchema = boolean;
/**
 * Also send log output to this http listener
 */
export type WebhookSchema = string;
/**
 * Path to configuration JSON file to register Appium with Selenium Grid; otherwise the configuration itself
 */
export type NodeconfigSchema =
  | {
      [k: string]: unknown;
    }
  | string;
/**
 * Do not check that needed files are readable and/or writable
 */
export type NoPermsCheckSchema = boolean;
/**
 * Cause sessions to fail if desired caps are sent in that Appium does not recognize as valid for the selected device
 */
export type StrictCapsSchema = boolean;
/**
 * Absolute path to directory Appium can use to manage temp files. Defaults to C:\Windows\Temp on Windows and /tmp otherwise.
 */
export type TmpSchema = string;
/**
 * Absolute path to directory Appium can use to save iOS instrument traces; defaults to <tmp>/appium-instruments
 */
export type TraceDirSchema = string;
/**
 * Add exaggerated spacing in logs to help with visual inspection
 */
export type DebugLogSpacingSchema = boolean;
/**
 * Add long stack traces to log entries. Recommended for debugging only.
 */
export type LongStacktraceSchema = boolean;
/**
 * Disable additional security checks, so it is possible to use some advanced features, provided by drivers supporting this option. Only enable it if all the clients are in the trusted network and it's not the case if a client could potentially break out of the session sandbox. Specific features can be overridden by using "deny-insecure"
 */
export type RelaxedSecuritySchema = boolean;
/**
 * Set which insecure features are allowed to run in this server's sessions. Features are defined on a driver level; see documentation for more details. Note that features defined via "deny-insecure" will be disabled, even if also listed here. If string, a path to a text file containing policy.
 */
export type AllowInsecureSchema = string[] | string;
/**
 * Set which insecure features are not allowed to run in this server's sessions. Features are defined on a driver level; see documentation for more details. Features listed here will not be enabled even if also listed in "allow-insecure", and even if "relaxed-security" is enabled. If string, a path to a text file containing policy.
 */
export type DenyInsecureSchema = string[] | string;

/**
 * A schema for Appium configuration files
 */
export interface AppiumConfigurationSchema {
  "appium-home"?: AppiumHomeSchema;
  "log-filters"?: LogFiltersSchema;
  server?: AppiumServerConfiguration;
  driver?: DriverSchema;
  plugin?: PluginSchema;
}
/**
 * Configuration when running Appium as a server
 */
export interface AppiumServerConfiguration {
  drivers?: DriversSchema;
  plugins?: PluginsSchema;
  "allow-cors"?: AllowCorsSchema;
  address?: AddressSchema;
  port?: PortSchema;
  "base-path"?: BasePathSchema;
  "keep-alive-timeout"?: KeepAliveTimeoutSchema;
  "callback-address"?: CallbackAddressSchema;
  "callback-port"?: CallbackPortSchema;
  "session-override"?: SessionOverrideSchema;
  log?: LogSchema;
  "log-level"?: LogLevelSchema;
  "log-timestamp"?: LogTimestampSchema;
  "local-timezone"?: LocalTimezoneSchema;
  "log-no-colors"?: LogNoColorsSchema;
  webhook?: WebhookSchema;
  nodeconfig?: NodeconfigSchema;
  "no-perms-check"?: NoPermsCheckSchema;
  "strict-caps"?: StrictCapsSchema;
  tmp?: TmpSchema;
  "trace-dir"?: TraceDirSchema;
  "debug-log-spacing"?: DebugLogSpacingSchema;
  "long-stacktrace"?: LongStacktraceSchema;
  "default-capabilities"?: DefaultCapabilitiesSchema;
  "relaxed-security"?: RelaxedSecuritySchema;
  "allow-insecure"?: AllowInsecureSchema;
  "deny-insecure"?: DenyInsecureSchema;
}
/**
 * Set the default desired capabilities, which will be set on each session unless overridden by received capabilities.
 */
export interface DefaultCapabilitiesSchema {
  [k: string]: unknown;
}
/**
 * Driver-specific configuration. Keys should correspond to driver package names
 */
export interface DriverSchema {
  [k: string]: unknown;
}
/**
 * Plugin-specific configuration. Keys should correspond to plugin package names
 */
export interface PluginSchema {
  [k: string]: unknown;
}
