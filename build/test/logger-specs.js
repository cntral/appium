"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _logsink = require("../lib/logsink");

var _sinon = _interopRequireDefault(require("sinon"));

var _appiumSupport = require("appium-support");

const forceLogs = process.env._FORCE_LOGS;
process.env._FORCE_LOGS = 1;

const log = _appiumSupport.logger.getLogger('Appium');

describe('logging', function () {
  let stderrSpy;
  let stdoutSpy;
  beforeEach(function () {
    stderrSpy = _sinon.default.spy(process.stderr, 'write');
    stdoutSpy = _sinon.default.spy(process.stdout, 'write');
    (0, _logsink.clear)();
  });
  afterEach(function () {
    stderrSpy.restore();
    stdoutSpy.restore();
  });
  after(function () {
    process.env._FORCE_LOGS = forceLogs;
  });
  const errorMsg = 'some error';
  const warnMsg = 'some warning';
  const debugMsg = 'some debug';

  function doLogging() {
    log.error(errorMsg);
    log.warn(warnMsg);
    log.debug(debugMsg);
  }

  it('should send error, info and debug when loglevel is debug', async function () {
    await (0, _logsink.init)({
      loglevel: 'debug'
    });
    doLogging();
    stderrSpy.callCount.should.equal(1);
    stderrSpy.args[0][0].should.include(errorMsg);
    stdoutSpy.callCount.should.equal(2);
    stdoutSpy.args[0][0].should.include(warnMsg);
    stdoutSpy.args[1][0].should.include(debugMsg);
  });
  it('should send error and info when loglevel is info', async function () {
    await (0, _logsink.init)({
      loglevel: 'info'
    });
    doLogging();
    stderrSpy.callCount.should.equal(1);
    stderrSpy.args[0][0].should.include(errorMsg);
    stdoutSpy.callCount.should.equal(1);
    stdoutSpy.args[0][0].should.include(warnMsg);
  });
  it('should send error when loglevel is error', async function () {
    await (0, _logsink.init)({
      loglevel: 'error'
    });
    doLogging();
    stderrSpy.callCount.should.equal(1);
    stderrSpy.args[0][0].should.include(errorMsg);
    stdoutSpy.callCount.should.equal(0);
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvbG9nZ2VyLXNwZWNzLmpzIl0sIm5hbWVzIjpbImZvcmNlTG9ncyIsInByb2Nlc3MiLCJlbnYiLCJfRk9SQ0VfTE9HUyIsImxvZyIsImxvZ2dlciIsImdldExvZ2dlciIsImRlc2NyaWJlIiwic3RkZXJyU3B5Iiwic3Rkb3V0U3B5IiwiYmVmb3JlRWFjaCIsInNpbm9uIiwic3B5Iiwic3RkZXJyIiwic3Rkb3V0IiwiYWZ0ZXJFYWNoIiwicmVzdG9yZSIsImFmdGVyIiwiZXJyb3JNc2ciLCJ3YXJuTXNnIiwiZGVidWdNc2ciLCJkb0xvZ2dpbmciLCJlcnJvciIsIndhcm4iLCJkZWJ1ZyIsIml0IiwibG9nbGV2ZWwiLCJjYWxsQ291bnQiLCJzaG91bGQiLCJlcXVhbCIsImFyZ3MiLCJpbmNsdWRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFJQSxNQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxXQUE5QjtBQUNBRixPQUFPLENBQUNDLEdBQVIsQ0FBWUMsV0FBWixHQUEwQixDQUExQjs7QUFDQSxNQUFNQyxHQUFHLEdBQUdDLHNCQUFPQyxTQUFQLENBQWlCLFFBQWpCLENBQVo7O0FBRUFDLFFBQVEsQ0FBQyxTQUFELEVBQVksWUFBWTtBQUM5QixNQUFJQyxTQUFKO0FBQ0EsTUFBSUMsU0FBSjtBQUNBQyxFQUFBQSxVQUFVLENBQUMsWUFBWTtBQUNyQkYsSUFBQUEsU0FBUyxHQUFHRyxlQUFNQyxHQUFOLENBQVVYLE9BQU8sQ0FBQ1ksTUFBbEIsRUFBMEIsT0FBMUIsQ0FBWjtBQUNBSixJQUFBQSxTQUFTLEdBQUdFLGVBQU1DLEdBQU4sQ0FBVVgsT0FBTyxDQUFDYSxNQUFsQixFQUEwQixPQUExQixDQUFaO0FBQ0E7QUFDRCxHQUpTLENBQVY7QUFLQUMsRUFBQUEsU0FBUyxDQUFDLFlBQVk7QUFDcEJQLElBQUFBLFNBQVMsQ0FBQ1EsT0FBVjtBQUNBUCxJQUFBQSxTQUFTLENBQUNPLE9BQVY7QUFDRCxHQUhRLENBQVQ7QUFJQUMsRUFBQUEsS0FBSyxDQUFDLFlBQVk7QUFDaEJoQixJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsV0FBWixHQUEwQkgsU0FBMUI7QUFDRCxHQUZJLENBQUw7QUFJQSxRQUFNa0IsUUFBUSxHQUFHLFlBQWpCO0FBQ0EsUUFBTUMsT0FBTyxHQUFHLGNBQWhCO0FBQ0EsUUFBTUMsUUFBUSxHQUFHLFlBQWpCOztBQUVBLFdBQVNDLFNBQVQsR0FBc0I7QUFDcEJqQixJQUFBQSxHQUFHLENBQUNrQixLQUFKLENBQVVKLFFBQVY7QUFDQWQsSUFBQUEsR0FBRyxDQUFDbUIsSUFBSixDQUFTSixPQUFUO0FBQ0FmLElBQUFBLEdBQUcsQ0FBQ29CLEtBQUosQ0FBVUosUUFBVjtBQUNEOztBQUVESyxFQUFBQSxFQUFFLENBQUMsMERBQUQsRUFBNkQsa0JBQWtCO0FBQy9FLFVBQU0sbUJBQVk7QUFBQ0MsTUFBQUEsUUFBUSxFQUFFO0FBQVgsS0FBWixDQUFOO0FBRUFMLElBQUFBLFNBQVM7QUFFVGIsSUFBQUEsU0FBUyxDQUFDbUIsU0FBVixDQUFvQkMsTUFBcEIsQ0FBMkJDLEtBQTNCLENBQWlDLENBQWpDO0FBQ0FyQixJQUFBQSxTQUFTLENBQUNzQixJQUFWLENBQWUsQ0FBZixFQUFrQixDQUFsQixFQUFxQkYsTUFBckIsQ0FBNEJHLE9BQTVCLENBQW9DYixRQUFwQztBQUVBVCxJQUFBQSxTQUFTLENBQUNrQixTQUFWLENBQW9CQyxNQUFwQixDQUEyQkMsS0FBM0IsQ0FBaUMsQ0FBakM7QUFDQXBCLElBQUFBLFNBQVMsQ0FBQ3FCLElBQVYsQ0FBZSxDQUFmLEVBQWtCLENBQWxCLEVBQXFCRixNQUFyQixDQUE0QkcsT0FBNUIsQ0FBb0NaLE9BQXBDO0FBQ0FWLElBQUFBLFNBQVMsQ0FBQ3FCLElBQVYsQ0FBZSxDQUFmLEVBQWtCLENBQWxCLEVBQXFCRixNQUFyQixDQUE0QkcsT0FBNUIsQ0FBb0NYLFFBQXBDO0FBQ0QsR0FYQyxDQUFGO0FBWUFLLEVBQUFBLEVBQUUsQ0FBQyxrREFBRCxFQUFxRCxrQkFBa0I7QUFDdkUsVUFBTSxtQkFBWTtBQUFDQyxNQUFBQSxRQUFRLEVBQUU7QUFBWCxLQUFaLENBQU47QUFFQUwsSUFBQUEsU0FBUztBQUVUYixJQUFBQSxTQUFTLENBQUNtQixTQUFWLENBQW9CQyxNQUFwQixDQUEyQkMsS0FBM0IsQ0FBaUMsQ0FBakM7QUFDQXJCLElBQUFBLFNBQVMsQ0FBQ3NCLElBQVYsQ0FBZSxDQUFmLEVBQWtCLENBQWxCLEVBQXFCRixNQUFyQixDQUE0QkcsT0FBNUIsQ0FBb0NiLFFBQXBDO0FBRUFULElBQUFBLFNBQVMsQ0FBQ2tCLFNBQVYsQ0FBb0JDLE1BQXBCLENBQTJCQyxLQUEzQixDQUFpQyxDQUFqQztBQUNBcEIsSUFBQUEsU0FBUyxDQUFDcUIsSUFBVixDQUFlLENBQWYsRUFBa0IsQ0FBbEIsRUFBcUJGLE1BQXJCLENBQTRCRyxPQUE1QixDQUFvQ1osT0FBcEM7QUFDRCxHQVZDLENBQUY7QUFXQU0sRUFBQUEsRUFBRSxDQUFDLDBDQUFELEVBQTZDLGtCQUFrQjtBQUMvRCxVQUFNLG1CQUFZO0FBQUNDLE1BQUFBLFFBQVEsRUFBRTtBQUFYLEtBQVosQ0FBTjtBQUVBTCxJQUFBQSxTQUFTO0FBRVRiLElBQUFBLFNBQVMsQ0FBQ21CLFNBQVYsQ0FBb0JDLE1BQXBCLENBQTJCQyxLQUEzQixDQUFpQyxDQUFqQztBQUNBckIsSUFBQUEsU0FBUyxDQUFDc0IsSUFBVixDQUFlLENBQWYsRUFBa0IsQ0FBbEIsRUFBcUJGLE1BQXJCLENBQTRCRyxPQUE1QixDQUFvQ2IsUUFBcEM7QUFFQVQsSUFBQUEsU0FBUyxDQUFDa0IsU0FBVixDQUFvQkMsTUFBcEIsQ0FBMkJDLEtBQTNCLENBQWlDLENBQWpDO0FBQ0QsR0FUQyxDQUFGO0FBVUQsQ0EzRE8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptb2NoYVxuXG5pbXBvcnQgeyBpbml0IGFzIGxvZ3NpbmtJbml0LCBjbGVhciBhcyBsb2dzaW5rQ2xlYXIgfSBmcm9tICcuLi9saWIvbG9nc2luayc7XG5pbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuXG5cbi8vIHRlbXBvcmFyaWx5IHR1cm4gb24gbG9nZ2luZyB0byBzdGRpbywgc28gd2UgY2FuIGNhdGNoIGFuZCBxdWVyeVxuY29uc3QgZm9yY2VMb2dzID0gcHJvY2Vzcy5lbnYuX0ZPUkNFX0xPR1M7XG5wcm9jZXNzLmVudi5fRk9SQ0VfTE9HUyA9IDE7XG5jb25zdCBsb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdBcHBpdW0nKTtcblxuZGVzY3JpYmUoJ2xvZ2dpbmcnLCBmdW5jdGlvbiAoKSB7XG4gIGxldCBzdGRlcnJTcHk7XG4gIGxldCBzdGRvdXRTcHk7XG4gIGJlZm9yZUVhY2goZnVuY3Rpb24gKCkge1xuICAgIHN0ZGVyclNweSA9IHNpbm9uLnNweShwcm9jZXNzLnN0ZGVyciwgJ3dyaXRlJyk7XG4gICAgc3Rkb3V0U3B5ID0gc2lub24uc3B5KHByb2Nlc3Muc3Rkb3V0LCAnd3JpdGUnKTtcbiAgICBsb2dzaW5rQ2xlYXIoKTtcbiAgfSk7XG4gIGFmdGVyRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgc3RkZXJyU3B5LnJlc3RvcmUoKTtcbiAgICBzdGRvdXRTcHkucmVzdG9yZSgpO1xuICB9KTtcbiAgYWZ0ZXIoZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Ll9GT1JDRV9MT0dTID0gZm9yY2VMb2dzO1xuICB9KTtcblxuICBjb25zdCBlcnJvck1zZyA9ICdzb21lIGVycm9yJztcbiAgY29uc3Qgd2Fybk1zZyA9ICdzb21lIHdhcm5pbmcnO1xuICBjb25zdCBkZWJ1Z01zZyA9ICdzb21lIGRlYnVnJztcblxuICBmdW5jdGlvbiBkb0xvZ2dpbmcgKCkge1xuICAgIGxvZy5lcnJvcihlcnJvck1zZyk7XG4gICAgbG9nLndhcm4od2Fybk1zZyk7XG4gICAgbG9nLmRlYnVnKGRlYnVnTXNnKTtcbiAgfVxuXG4gIGl0KCdzaG91bGQgc2VuZCBlcnJvciwgaW5mbyBhbmQgZGVidWcgd2hlbiBsb2dsZXZlbCBpcyBkZWJ1ZycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBhd2FpdCBsb2dzaW5rSW5pdCh7bG9nbGV2ZWw6ICdkZWJ1Zyd9KTtcblxuICAgIGRvTG9nZ2luZygpO1xuXG4gICAgc3RkZXJyU3B5LmNhbGxDb3VudC5zaG91bGQuZXF1YWwoMSk7XG4gICAgc3RkZXJyU3B5LmFyZ3NbMF1bMF0uc2hvdWxkLmluY2x1ZGUoZXJyb3JNc2cpO1xuXG4gICAgc3Rkb3V0U3B5LmNhbGxDb3VudC5zaG91bGQuZXF1YWwoMik7XG4gICAgc3Rkb3V0U3B5LmFyZ3NbMF1bMF0uc2hvdWxkLmluY2x1ZGUod2Fybk1zZyk7XG4gICAgc3Rkb3V0U3B5LmFyZ3NbMV1bMF0uc2hvdWxkLmluY2x1ZGUoZGVidWdNc2cpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBzZW5kIGVycm9yIGFuZCBpbmZvIHdoZW4gbG9nbGV2ZWwgaXMgaW5mbycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBhd2FpdCBsb2dzaW5rSW5pdCh7bG9nbGV2ZWw6ICdpbmZvJ30pO1xuXG4gICAgZG9Mb2dnaW5nKCk7XG5cbiAgICBzdGRlcnJTcHkuY2FsbENvdW50LnNob3VsZC5lcXVhbCgxKTtcbiAgICBzdGRlcnJTcHkuYXJnc1swXVswXS5zaG91bGQuaW5jbHVkZShlcnJvck1zZyk7XG5cbiAgICBzdGRvdXRTcHkuY2FsbENvdW50LnNob3VsZC5lcXVhbCgxKTtcbiAgICBzdGRvdXRTcHkuYXJnc1swXVswXS5zaG91bGQuaW5jbHVkZSh3YXJuTXNnKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgc2VuZCBlcnJvciB3aGVuIGxvZ2xldmVsIGlzIGVycm9yJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGF3YWl0IGxvZ3NpbmtJbml0KHtsb2dsZXZlbDogJ2Vycm9yJ30pO1xuXG4gICAgZG9Mb2dnaW5nKCk7XG5cbiAgICBzdGRlcnJTcHkuY2FsbENvdW50LnNob3VsZC5lcXVhbCgxKTtcbiAgICBzdGRlcnJTcHkuYXJnc1swXVswXS5zaG91bGQuaW5jbHVkZShlcnJvck1zZyk7XG5cbiAgICBzdGRvdXRTcHkuY2FsbENvdW50LnNob3VsZC5lcXVhbCgwKTtcbiAgfSk7XG59KTtcbiJdLCJmaWxlIjoidGVzdC9sb2dnZXItc3BlY3MuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
