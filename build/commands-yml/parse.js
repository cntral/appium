"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _path = _interopRequireDefault(require("path"));

var _yamlJs = _interopRequireDefault(require("yaml-js"));

var _appiumSupport = require("appium-support");

var _validate = _interopRequireDefault(require("validate.js"));

var _handlebars = _interopRequireDefault(require("handlebars"));

var _lodash = _interopRequireDefault(require("lodash"));

var _asyncbox = require("asyncbox");

var _validator = require("./validator");

var _url = _interopRequireDefault(require("url"));

var _fancyLog = _interopRequireDefault(require("fancy-log"));

var _findRoot = _interopRequireDefault(require("find-root"));

const platformRanges = {
  xcuitest: ['9.3'],
  uiautomation: ['8.0', '9.3'],
  espresso: ['?'],
  uiautomator2: ['?'],
  uiautomator: ['4.3'],
  windows: ['10'],
  mac: ['?']
};
const appiumRanges = {
  xcuitest: ['1.6.0'],
  uiautomator2: ['1.6.0'],
  espresso: ['1.9.0'],
  windows: ['1.6.0'],
  mac: ['1.6.4']
};
const rootFolder = (0, _findRoot.default)(__dirname);

_handlebars.default.registerHelper('versions', function versionHelper(object, name, driverName) {
  if (!object) {
    return 'None';
  }

  if (!_lodash.default.isObject(object)) {
    object = {};
  }

  let min = object[name ? `${name}_min` : 'min'];
  let max = object[name ? `${name}_max` : 'max'];

  if (!min) {
    if (name === 'appium' && _lodash.default.isArray(appiumRanges[driverName])) {
      min = appiumRanges[driverName][0];
    } else if (name === 'platform' && _lodash.default.isArray(platformRanges[driverName])) {
      min = platformRanges[driverName][0];
    }
  }

  if (!max) {
    if (name === 'appium' && appiumRanges[driverName]) {
      max = appiumRanges[driverName][1];
    } else if (name === 'platform' && platformRanges[driverName]) {
      max = platformRanges[driverName][1];
    }
  }

  if (!min && !max) {
    return 'All';
  } else if (!max) {
    return `${min}+`;
  } else if (!min) {
    return `<= ${max}`;
  }

  return `${min} to ${max}`;
});

_handlebars.default.registerHelper('hyphenate', str => str.replace('_', '-'));

_handlebars.default.registerHelper('uppercase', str => str.toUpperCase());

_handlebars.default.registerHelper('capitalize', function capitalizeDriver(driverName) {
  switch (driverName.toLowerCase()) {
    case 'xcuitest':
      return 'XCUITest';

    case 'uiautomation':
      return 'UIAutomation';

    case 'uiautomator2':
      return 'UiAutomator2';

    case 'uiautomator':
      return 'UiAutomator';

    case 'espresso':
      return 'Espresso';

    default:
      return driverName.length === 0 ? driverName : driverName[0].toUpperCase() + driverName.substr(1);
  }
});

_handlebars.default.registerHelper('if_eq', function ifEq(a, b, opts) {
  if (a === b) {
    return opts.fn(this);
  } else {
    return opts.inverse(this);
  }
});

function getBaseHostname(fullUrl) {
  const baseUrl = _url.default.parse(fullUrl);

  return baseUrl.hostname;
}

_handlebars.default.registerHelper('base_url', function baseUrl(fullUrl) {
  return getBaseHostname(fullUrl);
});

_handlebars.default.registerHelper('client_url', function clientUrl(clientUrl) {
  if (!clientUrl) {
    return;
  }

  const createUrlString = function createUrlString(clientUrl, name = getBaseHostname(clientUrl)) {
    return `[${name}](${clientUrl})`;
  };

  if (!_lodash.default.isArray(clientUrl)) {
    return createUrlString(clientUrl);
  }

  let urlStrings = [];

  for (const item of clientUrl) {
    for (let [key, value] of _lodash.default.toPairs(item)) {
      key = key.toLowerCase();
      const urlStr = _validator.CLIENT_URL_TYPES[key] === 'hostname' ? createUrlString(value) : createUrlString(value, _validator.CLIENT_URL_TYPES[key]);
      urlStrings.push(urlStr);
    }
  }

  return urlStrings.join(' ');
});

async function registerSpecUrlHelper() {
  const routesFile = await _appiumSupport.fs.readFile(_path.default.resolve(rootFolder, 'node_modules', 'appium-base-driver', 'lib', 'protocol', 'routes.js'), 'utf8');
  const routesFileLines = routesFile.split('\n');

  _handlebars.default.registerHelper('spec_url', function specUrl(specUrl, endpoint) {
    if (!specUrl.includes('routes.js')) {
      return specUrl;
    }

    if (specUrl.startsWith('routes.js')) {
      specUrl = `https://github.com/appium/appium-base-driver/blob/master/lib/protocol/${specUrl}`;
    }

    specUrl = specUrl.split('#L')[0];
    endpoint = endpoint.replace('session_id', 'sessionId');
    endpoint = endpoint.replace('element_id', 'elementId');
    let index;

    for (const i in routesFileLines) {
      if (routesFileLines[i].includes(endpoint)) {
        index = parseInt(i, 10) + 1;
        break;
      }
    }

    if (_lodash.default.isUndefined(index)) {
      throw new Error(`Unable to find entry in 'appium-base-driver#routes' for endpoint '${endpoint}'`);
    }

    return `${specUrl}#L${index}`;
  });
}

async function generateCommands() {
  await registerSpecUrlHelper();

  const commands = _path.default.resolve(rootFolder, 'commands-yml', 'commands/**/*.yml');

  (0, _fancyLog.default)('Traversing YML files', commands);
  await _appiumSupport.fs.rimraf(_path.default.resolve(rootFolder, 'docs', 'en', 'commands'));

  const template = _handlebars.default.compile(await _appiumSupport.fs.readFile(_path.default.resolve(rootFolder, 'commands-yml', 'template.md'), 'utf8'), {
    noEscape: true,
    strict: true
  });

  let fileCount = 0;

  for (const filename of await _appiumSupport.fs.glob(commands)) {
    const relativeFilename = _path.default.relative(_path.default.resolve(rootFolder, 'commands-yml'), filename);

    (0, _fancyLog.default)(`Rendering file: ${filename} ${relativeFilename}`);
    const inputYML = await _appiumSupport.fs.readFile(filename, 'utf8');

    const inputJSON = _yamlJs.default.load(inputYML);

    inputJSON.ymlFileName = `/${_path.default.relative(rootFolder, filename)}`;
    const validationErrors = (0, _validate.default)(inputJSON, _validator.validator);

    if (validationErrors) {
      throw new Error(`Data validation error for ${filename}: ${JSON.stringify(validationErrors)}`);
    }

    const markdown = template(inputJSON);

    const ext = _path.default.extname(relativeFilename);

    const markdownPath = `${relativeFilename.substring(0, relativeFilename.length - ext.length)}.md`;

    const outfile = _path.default.resolve(rootFolder, 'docs', 'en', markdownPath);

    (0, _fancyLog.default)(`    Writing to: ${outfile}`);
    await (0, _appiumSupport.mkdirp)(_path.default.dirname(outfile));
    await _appiumSupport.fs.writeFile(outfile, markdown, 'utf8');
    fileCount++;
  }

  (0, _fancyLog.default)(`Done writing ${fileCount} command documents`);
}

async function generateCommandIndex() {
  function getTree(element, path) {
    let node = {
      name: element[0]
    };

    if (!_lodash.default.isArray(element[1])) {
      node.path = `${path}/${element[1]}`;
    } else {
      node.path = `${path}/${element[1][0]}`;
      const name = element[1].shift();
      node.commands = [];

      for (let subElement of element[1]) {
        node.commands.push(getTree(subElement, `${path}/${name}`));
      }
    }

    return node;
  }

  const toc = require(_path.default.resolve(rootFolder, 'docs', 'toc.js'));

  const commandToc = _lodash.default.find(toc.en, value => value.indexOf('Commands') === 0);

  const commands = [];

  for (let el of commandToc[1].slice(1)) {
    commands.push(getTree(el, '/docs/en/commands'));
  }

  const commandTemplate = _handlebars.default.compile(await _appiumSupport.fs.readFile(_path.default.resolve(rootFolder, 'commands-yml', 'api-template.md'), 'utf8'), {
    noEscape: true,
    strict: true
  });

  async function writeIndex(index, commands, indexPath) {
    (0, _fancyLog.default)(`Creating API index '${index}'`);
    const commandMarkdown = commandTemplate({
      commands,
      path: indexPath
    });
    await _appiumSupport.fs.writeFile(index, commandMarkdown, 'utf8');
  }

  const apiIndex = _path.default.resolve(rootFolder, 'docs', 'en', 'about-appium', 'api.md');

  await writeIndex(apiIndex, commands);
  (0, _fancyLog.default)(`Done writing main API index`);

  async function writeIndividualIndexes(command) {
    if (!_appiumSupport.util.hasValue(command.commands)) {
      return;
    }

    const relPath = command.path.startsWith(_path.default.sep) ? command.path.substring(1) : command.path;

    const index = _path.default.resolve(rootFolder, relPath, 'README.md');

    await writeIndex(index, command.commands, command.path);

    for (const el of command.commands) {
      await writeIndividualIndexes(el);
    }
  }

  const index = _path.default.resolve(rootFolder, 'docs', 'en', 'commands', 'README.md');

  await writeIndex(index, commands);

  for (const el of commands) {
    await writeIndividualIndexes(el);
  }
}

async function main() {
  await generateCommands();
  await generateCommandIndex();
}

(0, _asyncbox.asyncify)(main);require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
